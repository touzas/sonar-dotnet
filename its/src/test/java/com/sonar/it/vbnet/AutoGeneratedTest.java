/*
 * SonarSource :: C# :: ITs :: Plugin
 * Copyright (C) 2011-2020 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.sonar.it.vbnet;

import com.sonar.it.shared.TestUtils;
import com.sonar.orchestrator.Orchestrator;
import com.sonar.orchestrator.build.ScannerForMSBuild;
import com.sonar.orchestrator.http.HttpMethod;
import java.io.IOException;
import java.nio.file.Path;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import static com.sonar.it.vbnet.Tests.getMeasureAsInt;
import static org.assertj.core.api.Assertions.assertThat;

public class AutoGeneratedTest {
  @ClassRule
  public static final Orchestrator orchestrator = Tests.ORCHESTRATOR;

  @Rule
  public TemporaryFolder temp = TestUtils.createTempFolder();

  @Before
  public void init() {
    orchestrator.resetData();
  }

  private final String PROJECT_NAME = "VbAutoGeneratedFiles";

  @Test
  public void autogenerated_code_with_analyzeGenerated_false() throws Exception {
    analyzeCoverageTestProject(PROJECT_NAME, false);

    // only MyModule.vb is scanned
    assertThat(getMeasureAsInt(PROJECT_NAME, "files")).isEqualTo(1);
    assertThat(getMeasureAsInt(PROJECT_NAME, "ncloc")).isEqualTo(7);
    assertThat(getMeasureAsInt(PROJECT_NAME, "code_smells")).isEqualTo(2);
  }

  @Test
  public void autogenerated_code_with_analyzeGenerated_true() throws Exception {
    analyzeCoverageTestProject(PROJECT_NAME, true);

    assertThat(getMeasureAsInt(PROJECT_NAME, "files")).isEqualTo(6);
    assertThat(getMeasureAsInt(PROJECT_NAME, "ncloc")).isEqualTo(50);
    assertThat(getMeasureAsInt(PROJECT_NAME, "code_smells")).isEqualTo(9);
  }

  private void analyzeCoverageTestProject(String projectName, boolean analyzeGenerated) throws IOException {
    // an alternative to using the SQ API is passing the setting directly to the Scanner for MSBuild (S4MSB),
    // however the S4MSB is not reading correctly the input parameters (SonarSource/sonar-scanner-msbuild#699)
    orchestrator.getServer()
      .newHttpCall("/api/settings/set")
      .setAdminCredentials()
      .setMethod(HttpMethod.POST)
      .setParam("key", "sonar.vbnet.analyzeGeneratedCode")
      .setParam("value", "" + analyzeGenerated)
      .execute();

    Path projectDir = Tests.projectDir(temp, projectName);

    ScannerForMSBuild beginStep = TestUtils.createBeginStep(projectName, projectDir);

    orchestrator.executeBuild(beginStep);

    TestUtils.runMSBuild(orchestrator, projectDir, "/t:Rebuild");

    orchestrator.executeBuild(TestUtils.createEndStep(projectDir));
  }
}
